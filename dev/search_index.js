var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#CementChemistry.extract_primary_species-Tuple{Any}","page":"Reference","title":"CementChemistry.extract_primary_species","text":"extract_primary_species(file_path)\n\nExtract primary species from a Cemdata .dat file, returning a DataFrame.\n\nArguments\n\nfile_path: Path to the Cemdata .dat file.\n\nReturns\n\nDataFrame of primary species.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.get_aqueous_species-Tuple{Any}","page":"Reference","title":"CementChemistry.get_aqueous_species","text":"get_aqueous_species(json_data)\n\nExtract the set of aqueous species from a ThermoFun JSON data structure.\n\nArguments\n\njson_data: Parsed JSON object containing a \"substances\" field.\n\nReturns\n\nSet{String}: Set of aqueous species symbols.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issubscript-Tuple{Char}","page":"Reference","title":"CementChemistry.issubscript","text":"Return whether c is a numeric subscript.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issuperscript-Tuple{Char}","page":"Reference","title":"CementChemistry.issuperscript","text":"Return whether c is a numeric superscript or ⁺/⁻.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_json-Tuple{Any, Any, Any}","page":"Reference","title":"CementChemistry.merge_json","text":"merge_json(json_path, dat_path, output_path)\n\nMerge a Cemdata .dat file into a ThermoFun JSON, preserving field order.\n\nArguments\n\njson_path: Path to the original JSON file.\ndat_path: Path to the Cemdata .dat file.\noutput_path: Path to write the merged JSON.\n\nReturns\n\nNothing. Writes the merged JSON to output_path.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_reactions-Tuple{Any, Any}","page":"Reference","title":"CementChemistry.merge_reactions","text":"merge_reactions(json_data, new_reactions)\n\nMerge new reactions into a ThermoFun JSON structure, skipping duplicates.\n\nArguments\n\njson_data: The parsed JSON object containing a \"reactions\" field.\nnew_reactions: Dictionary of new reactions to add.\n\nReturns\n\nThe updated JSON object with merged reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_sub-Tuple{AbstractString}","page":"Reference","title":"CementChemistry.normal_to_sub","text":"Convert all normal characters in s to numeric subscripts .\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_super-Tuple{AbstractString}","page":"Reference","title":"CementChemistry.normal_to_super","text":"Convert all normal characters or +/- in s to numeric superscripts.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_cemdata18_thermofun-Tuple{Any}","page":"Reference","title":"CementChemistry.parse_cemdata18_thermofun","text":"parse_cemdata18_thermofun(filename)\n\nParse a ThermoFun JSON file and return DataFrames for elements, substances, and reactions.\n\nArguments\n\nfilename: Path to the ThermoFun JSON file.\n\nReturns\n\ndf_elements: DataFrame of elements.\ndf_substances: DataFrame of substances.\ndf_reactions: DataFrame of reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_float_array-Tuple{Any}","page":"Reference","title":"CementChemistry.parse_float_array","text":"parse_float_array(line)\n\nParse a line containing a float array (e.g., -analytical_expression) and return the array of Float64 values.\n\nArguments\n\nline: The line to parse.\n\nReturns\n\nVector{Float64}: Array of parsed float values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_phases-Tuple{Any, Any}","page":"Reference","title":"CementChemistry.parse_phases","text":"parse_phases(dat_content, aqueous_species)\n\nParse the PHASES section of a Cemdata .dat file, extracting phase info and reactions.\n\nArguments\n\ndat_content: The content of the Cemdata .dat file as a string.\naqueous_species: Set of aqueous species symbols.\n\nReturns\n\nDict{String, Any}: Dictionary of phase names to their data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_reaction_stoich_cemdata","page":"Reference","title":"CementChemistry.parse_reaction_stoich_cemdata","text":"parse_reaction_stoich_cemdata(reaction_line::AbstractString, aqueous_species, gaseous=false)\n\nParse a Cemdata/Phreeqc reaction line, adding \"@\" for aqueous species as needed.\n\nArguments\n\nreaction_line::AbstractString: The reaction line from a Cemdata .dat file.\naqueous_species: Set of aqueous species symbols.\ngaseous: Boolean indicating if the phase is gaseous.\n\nReturns\n\nreactants: Array of Dicts with \"symbol\" and \"coefficient\" for each reactant/product.\nmodified_equation: The formatted equation string.\ncomment: Any comment found on the line.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CementChemistry.sub_to_normal-Tuple{AbstractString}","page":"Reference","title":"CementChemistry.sub_to_normal","text":"Convert all numeric subscripts in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.super_to_normal-Tuple{AbstractString}","page":"Reference","title":"CementChemistry.super_to_normal","text":"Convert all numeric superscripts or ⁺/⁻ in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.to_cement_notation-Tuple{Any, Any}","page":"Reference","title":"CementChemistry.to_cement_notation","text":"to_cement_notation(df_substances, species) -> String\n\nConvert a chemical species from a ThermoFun DataFrame to cement notation and Unicode representation.\n\nArguments\n\ndf_substances: DataFrame containing substance information (must have columns like symbol, name, and formula).\nspecies: A function or predicate used to select the desired species from the DataFrame (e.g., x -> x == \"CaO\").\nratio: If true, coefficients are rationalized for display (default: false).\n\nReturns\n\nString: The cement notation of the selected species, formatted with Unicode subscripts and superscripts.\n\nDetails\n\nThe function searches for the first row in df_substances where the predicate matches the symbol, name, or formula field.\nConverts the formula to cement notation and then to Unicode for display.\n\nExample\n\nto_cement_notation(df_substances, x -> x == \"CaO\") # returns \"𝐶\" in Unicode format\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.write_reaction-Tuple{Any, Any}","page":"Reference","title":"CementChemistry.write_reaction","text":"write_reaction(f, reaction)\n\nWrite a reaction Dict as JSON to a file (used for custom JSON output).\n\nArguments\n\nf: An open IO stream to write to.\nreaction: The reaction dictionary to write.\n\nReturns\n\nNothing. Writes directly to the file.\n\n\n\n\n\n","category":"method"},{"location":"#CementChemistry","page":"Home","title":"CementChemistry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CementChemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computational chemistry tool for low-carbon cementitious materials","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfbarthelemy/CementChemistry.jl","category":"page"},{"location":"tutorial/#Tutorials","page":"Tutorial","title":"Tutorials","text":"","category":"section"},{"location":"tutorial/#Extract-data-from-ThermoFun","page":"Tutorial","title":"Extract data from ThermoFun","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Imagine we want to extract the set of aqueous species from a ThermoFun JSON data structure. For that, we use the function CementChemistry.get_aqueous_species:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CementChemistry\n","category":"page"}]
}
