var documenterSearchIndex = {"docs":
[{"location":"man/quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"Install CementChemistry in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"pkg> add CementChemistry","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"In order to use CementChemistry, it is then necessary to load the CementChemistry.jl package:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> using CementChemistry","category":"page"},{"location":"man/stoichio_matrix/#Stoichiometric-Matrix-Construction","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"From the definition of species, it is possible to construct a stoichiometric matrix that establishes the relationship between species and chemical elements for species or cement species:","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"using CementChemistry #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)\nHSO4 = Species(\"HSO₄⁻\")\nCO2 = Species(Dict(:C => 1, :O => 2); symbol=\"CO₂\")\nspecies = [H2O, HSO4, CO2]\nA, indep_comp, dep_comp = stoich_matrix(species)\nprintln(A)\nprintln(indep_comp)\nprintln(dep_comp)","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"","category":"page"},{"location":"man/stoichio_matrix/#Advanced-Stoichiometric-Matrix-(Database-Species)","page":"Stoichiometric Matrix Construction","title":"Advanced Stoichiometric Matrix (Database Species)","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"The same exercise can be performed between species and primary species defined from the species and cemdata18 database. :","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"using CementChemistry #hide\ndf_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\") #hide\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\") #hide\ngiven_species = filter(row -> row.symbol ∈ split(\"C3S Portlandite Jennite H2O@\"), df_substances)\nsecondaries = filter(row -> row.aggregate_state == \"AS_AQUEOUS\" &&\n                          all(k -> first(k) ∈ union_atoms(given_species.atoms), row.atoms) &&\n                          row.symbol ∉ split(\"H2@ O2@\"),\n                          df_substances)\nall_species = unique(vcat(given_species, secondaries), :symbol)\nspecies = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(all_species.formula, all_species.symbol)]\ncandidate_primaries = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(df_primaries.formula, df_primaries.symbol)]\nA, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries);","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix Construction","title":"Stoichiometric Matrix Construction","text":"","category":"page"},{"location":"man/databases/#Database-Interoperability","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"So far, we have looked at the possibility of creating and manipulating any species, whether they exist or not. Creating an H₂O⁺⁴ molecule, for example, is not a problem.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"HSO4 = Species(\"H₂O⁴⁺\")","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"However, you will admit that it is a little strange...","category":"page"},{"location":"man/databases/#Cemdata18-and-PSI-Nagra-12-07-Databases","page":"Database Interoperability","title":"Cemdata18 and PSI-Nagra-12-07 Databases","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"This is why Cement Chemistry relies on existing databases, in particular Cemdata18 and PSI-Nagra-12-07. Cemdata18 is a chemical thermodynamic database for hydrated Portland cements and alkali-activated materials. PSI-Nagra is a Chemical Thermodynamic Database. The formalism adopted for these databases is that of Thermofun which is a universal open-source client that delivers thermodynamic properties of substances and reactions at the temperature and pressure of interest. The information is stored in json files.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"With Cementchemistry, you can parse a ThermoFun-like json file and return DataFrames for elements, substances, and reactions.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"CementChemistry.parse_cemdata18_thermofun","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\")\nshow(df_elements, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_substances, allcols=true, allrows=false)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_reactions, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/#Primary-species-extraction","page":"Database Interoperability","title":"Primary species extraction","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"It is also possible to retrieve primary species from the Cemdata18 database, primary species being the designation of a subset of species for which any species can be represented as the linear combination of primary species.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"CementChemistry.extract_primary_species","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\nshow(df_primaries, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"page"},{"location":"reference/#Reference","page":"API","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#CementChemistry.extract_primary_species-Tuple{Any}","page":"API","title":"CementChemistry.extract_primary_species","text":"extract_primary_species(file_path)\n\nExtract primary species from a Cemdata .dat file, returning a DataFrame.\n\nArguments\n\nfile_path: Path to the Cemdata .dat file.\n\nReturns\n\nDataFrame of primary species.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.get_aqueous_species-Tuple{Any}","page":"API","title":"CementChemistry.get_aqueous_species","text":"get_aqueous_species(json_data)\n\nExtract the set of aqueous species from a ThermoFun JSON data structure.\n\nArguments\n\njson_data: Parsed JSON object containing a \"substances\" field.\n\nReturns\n\nSet{String}: Set of aqueous species symbols.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issubscript-Tuple{Char}","page":"API","title":"CementChemistry.issubscript","text":"Return whether c is a numeric subscript.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issuperscript-Tuple{Char}","page":"API","title":"CementChemistry.issuperscript","text":"Return whether c is a numeric superscript or ⁺/⁻.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_json-Tuple{Any, Any, Any}","page":"API","title":"CementChemistry.merge_json","text":"merge_json(json_path, dat_path, output_path)\n\nMerge a Cemdata .dat file into a ThermoFun JSON, preserving field order.\n\nArguments\n\njson_path: Path to the original JSON file.\ndat_path: Path to the Cemdata .dat file.\noutput_path: Path to write the merged JSON.\n\nReturns\n\nNothing. Writes the merged JSON to output_path.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_reactions-Tuple{Any, Any}","page":"API","title":"CementChemistry.merge_reactions","text":"merge_reactions(json_data, new_reactions)\n\nMerge new reactions into a ThermoFun JSON structure, skipping duplicates.\n\nArguments\n\njson_data: The parsed JSON object containing a \"reactions\" field.\nnew_reactions: Dictionary of new reactions to add.\n\nReturns\n\nThe updated JSON object with merged reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_sub-Tuple{AbstractString}","page":"API","title":"CementChemistry.normal_to_sub","text":"Convert all normal characters in s to numeric subscripts .\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_super-Tuple{AbstractString}","page":"API","title":"CementChemistry.normal_to_super","text":"Convert all normal characters or +/- in s to numeric superscripts.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_cemdata18_thermofun-Tuple{Any}","page":"API","title":"CementChemistry.parse_cemdata18_thermofun","text":"parse_cemdata18_thermofun(filename)\n\nParse a ThermoFun JSON file and return DataFrames for elements, substances, and reactions.\n\nArguments\n\nfilename: Path to the ThermoFun JSON file.\n\nReturns\n\ndf_elements: DataFrame of elements.\ndf_substances: DataFrame of substances.\ndf_reactions: DataFrame of reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_float_array-Tuple{Any}","page":"API","title":"CementChemistry.parse_float_array","text":"parse_float_array(line)\n\nParse a line containing a float array (e.g., -analytical_expression) and return the array of Float64 values.\n\nArguments\n\nline: The line to parse.\n\nReturns\n\nVector{Float64}: Array of parsed float values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_phases-Tuple{Any, Any}","page":"API","title":"CementChemistry.parse_phases","text":"parse_phases(dat_content, aqueous_species)\n\nParse the PHASES section of a Cemdata .dat file, extracting phase info and reactions.\n\nArguments\n\ndat_content: The content of the Cemdata .dat file as a string.\naqueous_species: Set of aqueous species symbols.\n\nReturns\n\nDict{String, Any}: Dictionary of phase names to their data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_reaction_stoich_cemdata","page":"API","title":"CementChemistry.parse_reaction_stoich_cemdata","text":"parse_reaction_stoich_cemdata(reaction_line::AbstractString, aqueous_species, gaseous=false)\n\nParse a Cemdata/Phreeqc reaction line, adding \"@\" for aqueous species as needed.\n\nArguments\n\nreaction_line::AbstractString: The reaction line from a Cemdata .dat file.\naqueous_species: Set of aqueous species symbols.\ngaseous: Boolean indicating if the phase is gaseous.\n\nReturns\n\nreactants: Array of Dicts with \"symbol\" and \"coefficient\" for each reactant/product.\nmodified_equation: The formatted equation string.\ncomment: Any comment found on the line.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CementChemistry.sub_to_normal-Tuple{AbstractString}","page":"API","title":"CementChemistry.sub_to_normal","text":"Convert all numeric subscripts in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.super_to_normal-Tuple{AbstractString}","page":"API","title":"CementChemistry.super_to_normal","text":"Convert all numeric superscripts or ⁺/⁻ in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.to_cement_notation-Tuple{Any, Any}","page":"API","title":"CementChemistry.to_cement_notation","text":"to_cement_notation(df_substances, species) -> String\n\nConvert a chemical species from a ThermoFun DataFrame to cement notation and Unicode representation.\n\nArguments\n\ndf_substances: DataFrame containing substance information (must have columns like symbol, name, and formula).\nspecies: A function or predicate used to select the desired species from the DataFrame (e.g., x -> x == \"CaO\").\nratio: If true, coefficients are rationalized for display (default: false).\n\nReturns\n\nString: The cement notation of the selected species, formatted with Unicode subscripts and superscripts.\n\nDetails\n\nThe function searches for the first row in df_substances where the predicate matches the symbol, name, or formula field.\nConverts the formula to cement notation and then to Unicode for display.\n\nExample\n\nto_cement_notation(df_substances, x -> x == \"CaO\") # returns \"𝐶\" in Unicode format\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.write_reaction-Tuple{Any, Any}","page":"API","title":"CementChemistry.write_reaction","text":"write_reaction(f, reaction)\n\nWrite a reaction Dict as JSON to a file (used for custom JSON output).\n\nArguments\n\nf: An open IO stream to write to.\nreaction: The reaction dictionary to write.\n\nReturns\n\nNothing. Writes directly to the file.\n\n\n\n\n\n","category":"method"},{"location":"#CementChemistry","page":"Home","title":"CementChemistry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CementChemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computational chemistry tool for low-carbon cementitious materials","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfbarthelemy/CementChemistry.jl","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install CementChemistry in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add CementChemistry","category":"page"},{"location":"","page":"Home","title":"Home","text":"In order to use CementChemistry, it is then necessary to load the CementChemistry.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CementChemistry","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"This tutorial progressively introduces the main features of CementChemistry using practical examples.","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"","category":"page"},{"location":"man/formula_manipulation/#Chemical-Formula-Manipulation","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"CementChemistry allows you to create and manipulate chemical formulas. It is based on Formula which is a structure (struct) which contains an expression, a writing of the formula close to those found in the Phreeqc databases, a unicode expression as well as a composition in the form of dictionaries and a charge.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"struct Formula{T<:Number}\n    expr::String\n    phreeqc::String\n    unicode::String\n    composition::Dict{Symbol,T}\n    charge::Int8\nend","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Formulas can be constructed:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"by parsing a string containing eventually fractional or decimal coefficients","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nfgen = Formula(\"A1//2B3C0.4\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"from symbols representing atoms ","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nfCO2 = :C + 2 * :O","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Coefficient types can be changed a posteriori, the type of the Formula struct being associated with the most complex type of the set of coefficients.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"convert(Float64, fgen)","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"man/formula_manipulation/#Species","page":"Chemical Formula Manipulation","title":"Species","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Species is also a struct and is defined by a name, symbol, structure and properties. It creates chemical species for solution or solid phases:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"struct Species{T<:Number} <: AbstractSpecies\n    name::String\n    symbol::String\n    formula::Formula{T}\n    properties::Dict{Symbol,Number}\nend","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Species can be created from:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"a Formula","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"a string","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nHSO4 = Species(\"HSO₄⁻\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"a dictionary","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nCO2 = Species(Dict(:C => 1, :O => 2); name=\"CO₂\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"NOTE:  To add a charge when creating species with a dictionary, you must add, after the dictionary, the value of the charge (charge is considered an argument of the structure).","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nCO2 = Species(Dict(:Si => 1, :O => 3),-2; name=\"SiO₃²⁻\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"NOTE: You will also have noticed that a calculation of the molar mass of the species is systematically carried out.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"man/formula_manipulation/#Cement-Species","page":"Chemical Formula Manipulation","title":"Cement Species","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"The manipulation of chemical formulas can also be done in cement notation. Here are examples of anhydrous phases:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"C3S = CemSpecies(\"C3S\")\nC2S = CemSpecies(\"C2S\")\nC3A = CemSpecies(\"C3A\")\nC4AF = CemSpecies(Dict(:C => 4, :A => 1, :F => 1); name = \"C4AF\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"man/formula_manipulation/#Symbolic-and-Numeric-CemSpecies","page":"Chemical Formula Manipulation","title":"Symbolic and Numeric CemSpecies","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"The previous species were constructed from integer values ​​of the number of chemical elements. However, numerical values ​​are possible, as we have seen for formulas, as well as symbolic values. To do this, you need to use the SymPy library:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using SymPy\nâ, b̂, ĝ = symbols(\"â b̂ ĝ\", real = true)\nox = Dict(:C => â, :S => one(Sym), :A => b̂, :H => ĝ)\nCSH = CemSpecies(ox)","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"numCSH = CemSpecies(map(N, map(subs, cemformula(CSH), â => 1.8, b̂ => 1, ĝ => 5)))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Conversion of coefficient types can also be done:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"floatCSH = Species(convert(Float64, formula(numCSH)))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"man/formula_manipulation/#Conversion-to-Cement-Notation","page":"Chemical Formula Manipulation","title":"Conversion to Cement Notation","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Convert species to cement notation and Unicode:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"H2O = Species(\"H₂O\")\ncemH2O = CemSpecies(H2O)","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"}]
}
