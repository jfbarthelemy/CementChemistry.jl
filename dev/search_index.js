var documenterSearchIndex = {"docs":
[{"location":"man/formula_manipulation/#Chemical-Formula-Manipulation","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"CementChemistry allows you to create and manipulate chemical formulas. It is based on Formula which is a structure (struct) which contains an expression, a writing of the formula close to those found in the Phreeqc databases, a unicode expression as well as a composition in the form of dictionaries and a charge.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"struct Formula{T<:Number}\n    expr::String\n    phreeqc::String\n    unicode::String\n    colored::String\n    composition::OrderedDict{Symbol,T}\n    charge::Int8\nend","category":"page"},{"location":"man/formula_manipulation/#Formula-construction","page":"Chemical Formula Manipulation","title":"Formula construction","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Formulas can be constructed:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"by parsing a string containing eventually fractional or decimal coefficients","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nfgen = Formula(\"A1//2B3C0.4\")","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"from symbols representing atoms ","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"using CementChemistry #hide\nfCO2 = :C + 2 * :O","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"WARNING: This way of constructing formulas is only possible for a certain number of elements from Mendeleïev's table and which are found in cementitious materials. The list of the elements is as follows:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"ATOMIC_ORDER","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Charges can also be included during the creation in two different ways:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"fHSO₄⁻ = :H+:S+4*:O+:e","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Or:","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"fNa⁺ = :Na+:Zz","category":"page"},{"location":"man/formula_manipulation/#Type-of-Formula","page":"Chemical Formula Manipulation","title":"Type of Formula","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"The type of the Formula struct being associated with the most complex type of the set of coefficients.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"typeof(Formula(\"H2O\"))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"typeof(Formula(\"A1//2B3C0.4\"))","category":"page"},{"location":"man/formula_manipulation/#Change-of-type","page":"Chemical Formula Manipulation","title":"Change of type","text":"","category":"section"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"Coefficient types can be changed a posteriori.","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"convert(Float64, Formula(\"H2O\"))","category":"page"},{"location":"man/formula_manipulation/","page":"Chemical Formula Manipulation","title":"Chemical Formula Manipulation","text":"","category":"page"},{"location":"man/quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"Install CementChemistry in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"pkg> add CementChemistry","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"In order to use CementChemistry, it is then necessary to load the CementChemistry.jl package:","category":"page"},{"location":"man/quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> using CementChemistry","category":"page"},{"location":"example/get_stochio_matrix/#Get-Stoichiometric-Matrix-from-a-list-of-species","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"","category":"section"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"Let's imagine that we want to form the stochiometric matrix of a list of solid and water species. For that, we need to read the database from which these species originate and retrieve the list of primary species from that database.","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"using CementChemistry\nusing PrettyTables\ndf_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\")\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"See CementChemistry.parse_cemdata18_thermofun and CementChemistry.extract_primary_species","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"It is then necessary to identify the list of secondary species likely to appear during the reactions.","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"given_species = filter(row -> row.symbol ∈ split(\"C3S Portlandite Jennite H2O@\"), df_substances)\nsecondaries = filter(row -> row.aggregate_state == \"AS_AQUEOUS\" &&\n                          all(k -> first(k) ∈ union_atoms(given_species.atoms), row.atoms) &&\n                          row.symbol ∉ split(\"H2@ O2@\"),\n                          df_substances)","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"We can then deduce the primary species concerned by the reaction.","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"all_species = unique(vcat(given_species, secondaries), :symbol)\nspecies = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(all_species.formula, all_species.symbol)]\ncandidate_primaries = [Species(f; symbol = phreeqc_to_unicode(n)) for (f, n) in zip(df_primaries.formula, df_primaries.symbol)]","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"And construct the stoichiometric matrix","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries)\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stochio_matrix/#Get-Stoichiometric-Matrix-from-a-database-file","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a database file","text":"","category":"section"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"using CementChemistry\nusing PrettyTables\ndf_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\")\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\naqueous_species = filter(row->row.aggregate_state == \"AS_AQUEOUS\", df_substances)\nspecies = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(aqueous_species.formula, aqueous_species.symbol)]\ncandidate_primaries = [Species(f; symbol=phreeqc_to_unicode(n)) for (f,n) in zip(df_primaries.formula, df_primaries.symbol)]\nA, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ;\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"All the reactions of the species contained in the database can thus be reconstructed. Here, only ionic species are listed given the choice to only read ionic species in the database (\"AS_AQUEOUS\").","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ;","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"The exercise can also be done on solid species. In this case, the data filter is carried out using the keyword \"AS_CRYSTAL\", in accordance with the terminology adopted in Thermofun.","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ; #hide\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ; #hide","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"Or with gases (\"AS_GAS\")","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"A, indep_comp, dep_comp = stoich_matrix(species, candidate_primaries) ; #hide\n\nusing PrettyTables #hide","category":"page"},{"location":"example/get_stochio_matrix/","page":"Get Stoichiometric Matrix from a list of species","title":"Get Stoichiometric Matrix from a list of species","text":"stoich_matrix_to_reactions(A, indep_comp, dep_comp) ; #hide","category":"page"},{"location":"man/species/#Species","page":"Species","title":"Species","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Species is a struct and is defined by a name, symbol, structure and properties. It creates chemical species for solution or solid phases:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"struct Species{T<:Number} <: AbstractSpecies\n    name::String\n    symbol::String\n    formula::Formula{T}\n    properties::OrderedDict{Symbol,Number}\nend","category":"page"},{"location":"man/species/#Species-construction","page":"Species","title":"Species construction","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Species can be created from:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a Formula","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using CementChemistry #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a string","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using CementChemistry #hide\nHSO4 = Species(\"HSO₄⁻\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"a dictionary","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using CementChemistry #hide\nCO2 = Species(Dict(:C => 1, :O => 2); name=\"CO₂\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"NOTE:  To add a charge when creating species with a dictionary, you must add, after the dictionary, the value of the charge (charge is considered an argument of the structure).","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using CementChemistry #hide\nCO2 = Species(Dict(:Si => 1, :O => 3),-2; name=\"SiO₃²⁻\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"NOTE: You will also have noticed that a calculation of the molar mass of the species is systematically carried out.","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Cement-Species","page":"Species","title":"Cement Species","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"The manipulation of chemical formulas can also be done in cement notation. Here are examples of anhydrous phases:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"C3S = CemSpecies(\"C3S\")\nC2S = CemSpecies(\"C2S\")\nC3A = CemSpecies(\"C3A\")\nC4AF = CemSpecies(Dict(:C => 4, :A => 1, :F => 1); name = \"C4AF\")","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Symbolic-and-Numeric-CemSpecies","page":"Species","title":"Symbolic and Numeric CemSpecies","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"The previous species were constructed from integer values ​​of the number of chemical elements. However, numerical values ​​are possible, as we have seen for formulas, as well as symbolic values. To do this, you need to use the SymPy library:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"using SymPy\nâ, b̂, ĝ = symbols(\"â b̂ ĝ\", real = true)\nox = Dict(:C => â, :S => one(Sym), :A => b̂, :H => ĝ)\nCSH = CemSpecies(ox)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"numCSH = CemSpecies(map(N, map(subs, cemformula(CSH), â => 1.8, b̂ => 1, ĝ => 5)))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Conversion of coefficient types can also be done:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"floatCSH = Species(convert(Float64, formula(numCSH)))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/species/#Conversion-to-Cement-Notation","page":"Species","title":"Conversion to Cement Notation","text":"","category":"section"},{"location":"man/species/","page":"Species","title":"Species","text":"Convert species to cement notation and Unicode:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"H2O = Species(\"H₂O\")\ncemH2O = CemSpecies(H2O)","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"Species can also be read from a database (Cemdata18 here). Reading the databases is detailed here. Conversion is then possible:","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"df_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\")\ndf_Jennite = filter(row->row.symbol == \"Jennite\", df_substances)\nJennite = Species(df_Jennite.formula[1]; name=df_Jennite.name[1], symbol=df_Jennite.symbol[1])\ncemJennite = CemSpecies(Jennite)\nprintln(unicode(Jennite), \" ≡ \", unicode(cemJennite))","category":"page"},{"location":"man/species/","page":"Species","title":"Species","text":"","category":"page"},{"location":"man/databases/#Database-Interoperability","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"So far, we have looked at the possibility of creating and manipulating any species, whether they exist or not. Creating an H₂O⁺⁴ molecule, for example, is not a problem.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"HSO4 = Species(\"H₂O⁴⁺\")","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"However, you will admit that it is a little strange...","category":"page"},{"location":"man/databases/#Cemdata18-and-PSI-Nagra-12-07-Databases","page":"Database Interoperability","title":"Cemdata18 and PSI-Nagra-12-07 Databases","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"This is why Cement Chemistry relies on existing databases, in particular Cemdata18 and PSI-Nagra-12-07. Cemdata18 is a chemical thermodynamic database for hydrated Portland cements and alkali-activated materials. PSI-Nagra is a Chemical Thermodynamic Database. The formalism adopted for these databases is that of Thermofun which is a universal open-source client that delivers thermodynamic properties of substances and reactions at the temperature and pressure of interest. The information is stored in json files.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"With Cementchemistry, you can parse a ThermoFun-like json file and return DataFrames for:","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"elements:","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\")\nshow(df_elements, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"CementChemistry.parse_cemdata18_thermofun","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"species (aqueous, solid or gaseous phases):","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_substances, allcols=true, allrows=false)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"reactions contained in the database","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"show(df_reactions, allcols=true, allrows=false)","category":"page"},{"location":"man/databases/#Primary-species-extraction","page":"Database Interoperability","title":"Primary species extraction","text":"","category":"section"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"It is also possible to retrieve primary species from the Cemdata18 database, primary species being the designation of a subset of species for which any species can be represented as the linear combination of primary species.","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"df_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")\nshow(df_primaries, allcols=true, allrows=true)","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"CementChemistry.extract_primary_species","category":"page"},{"location":"man/databases/","page":"Database Interoperability","title":"Database Interoperability","text":"","category":"page"},{"location":"man/stoichio_matrix/#Stoichiometric-Matrix","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"From the definition of species, it is possible to construct a stoichiometric matrix that establishes the relationship between species and chemical elements for species or oxides for cement species. This is called canonical decomposition.","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"Any species can be described as a linear combination of chemical elements. A species vector can be expressed as a function of the chemical elements on which they depend. This dependence leads to the creation of a stochiometric matrix.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using CementChemistry #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)\nHSO4 = Species(\"HSO₄⁻\")\nCO2 = Species(Dict(:C => 1, :O => 2); symbol=\"CO₂\")\nspecies = [H2O, HSO4, CO2]\ncanonical_stoich_matrix(species) ;\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-cement-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for cement species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"A cement species vector can also be expressed in terms of other species on which they depend. Here, the cement species are expressed in terms of the oxides from which they are composed.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using CementChemistry #hide\nC3S = CemSpecies(\"C3S\")\nC2S = CemSpecies(\"C2S\")\nC3A = CemSpecies(\"C3A\")\nC4AF = CemSpecies(Dict(:C=>4, :A=>1, :F=>1); name=\"C4AF\")\ncemspecies = [C3S, C2S, C3A, C4AF]\nA, indep_comp = canonical_stoich_matrix(cemspecies)\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"man/stoichio_matrix/#Stochiometric-matrix-for-species-and-primary-species","page":"Stoichiometric Matrix","title":"Stochiometric matrix for species and primary species","text":"","category":"section"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"The decomposition can also be done according to the primary species previously defined.","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using CementChemistry #hide\nfH2O = 2 * :H + :O\nH2O = Species(fH2O)\nHSO4 = Species(\"HSO₄⁻\")\nCO2 = Species(Dict(:C => 1, :O => 2); symbol=\"CO₂\")\nspecies = [H2O, HSO4, CO2]\nA, indep_comp, dep_comp = stoich_matrix(species)\n\nusing PrettyTables #hide","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"The primary species of Cemdata18 can be listed with the following command:","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"using CementChemistry #hide\ndf_elements, df_substances, df_reactions = parse_cemdata18_thermofun(\"../../../data/cemdata18-merged.json\") #hide\ndf_primaries = extract_primary_species(\"../../../data/CEMDATA18-31-03-2022-phaseVol.dat\")","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"See CementChemistry.parse_cemdata18_thermofun and CementChemistry.extract_primary_species","category":"page"},{"location":"man/stoichio_matrix/","page":"Stoichiometric Matrix","title":"Stoichiometric Matrix","text":"","category":"page"},{"location":"reference/#Reference","page":"API","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#CementChemistry.extract_primary_species-Tuple{Any}","page":"API","title":"CementChemistry.extract_primary_species","text":"extract_primary_species(file_path)\n\nExtract primary species from a Cemdata .dat file, returning a DataFrame.\n\nArguments\n\nfile_path: Path to the Cemdata .dat file.\n\nReturns\n\nDataFrame of primary species.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.get_aqueous_species-Tuple{Any}","page":"API","title":"CementChemistry.get_aqueous_species","text":"get_aqueous_species(json_data)\n\nExtract the set of aqueous species from a ThermoFun JSON data structure.\n\nArguments\n\njson_data: Parsed JSON object containing a \"substances\" field.\n\nReturns\n\nSet{String}: Set of aqueous species symbols.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issubscript-Tuple{Char}","page":"API","title":"CementChemistry.issubscript","text":"Return whether c is a numeric subscript.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.issuperscript-Tuple{Char}","page":"API","title":"CementChemistry.issuperscript","text":"Return whether c is a numeric superscript or ⁺/⁻.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_json-Tuple{Any, Any, Any}","page":"API","title":"CementChemistry.merge_json","text":"merge_json(json_path, dat_path, output_path)\n\nMerge a Cemdata .dat file into a ThermoFun JSON, preserving field order.\n\nArguments\n\njson_path: Path to the original JSON file.\ndat_path: Path to the Cemdata .dat file.\noutput_path: Path to write the merged JSON.\n\nReturns\n\nNothing. Writes the merged JSON to output_path.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.merge_reactions-Tuple{Any, Any}","page":"API","title":"CementChemistry.merge_reactions","text":"merge_reactions(json_data, new_reactions)\n\nMerge new reactions into a ThermoFun JSON structure, skipping duplicates.\n\nArguments\n\njson_data: The parsed JSON object containing a \"reactions\" field.\nnew_reactions: Dictionary of new reactions to add.\n\nReturns\n\nThe updated JSON object with merged reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_sub-Tuple{AbstractString}","page":"API","title":"CementChemistry.normal_to_sub","text":"Convert all normal characters in s to numeric subscripts .\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.normal_to_super-Tuple{AbstractString}","page":"API","title":"CementChemistry.normal_to_super","text":"Convert all normal characters or +/- in s to numeric superscripts.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_cemdata18_thermofun-Tuple{Any}","page":"API","title":"CementChemistry.parse_cemdata18_thermofun","text":"parse_cemdata18_thermofun(filename)\n\nParse a ThermoFun JSON file and return DataFrames for elements, substances, and reactions.\n\nArguments\n\nfilename: Path to the ThermoFun JSON file.\n\nReturns\n\ndf_elements: DataFrame of elements.\ndf_substances: DataFrame of substances.\ndf_reactions: DataFrame of reactions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_float_array-Tuple{Any}","page":"API","title":"CementChemistry.parse_float_array","text":"parse_float_array(line)\n\nParse a line containing a float array (e.g., -analytical_expression) and return the array of Float64 values.\n\nArguments\n\nline: The line to parse.\n\nReturns\n\nVector{Float64}: Array of parsed float values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_phases-Tuple{Any, Any}","page":"API","title":"CementChemistry.parse_phases","text":"parse_phases(dat_content, aqueous_species)\n\nParse the PHASES section of a Cemdata .dat file, extracting phase info and reactions.\n\nArguments\n\ndat_content: The content of the Cemdata .dat file as a string.\naqueous_species: Set of aqueous species symbols.\n\nReturns\n\nDict{String, Any}: Dictionary of phase names to their data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.parse_reaction_stoich_cemdata","page":"API","title":"CementChemistry.parse_reaction_stoich_cemdata","text":"parse_reaction_stoich_cemdata(reaction_line::AbstractString, aqueous_species, gaseous=false)\n\nParse a Cemdata/Phreeqc reaction line, adding \"@\" for aqueous species as needed.\n\nArguments\n\nreaction_line::AbstractString: The reaction line from a Cemdata .dat file.\naqueous_species: Set of aqueous species symbols.\ngaseous: Boolean indicating if the phase is gaseous.\n\nReturns\n\nreactants: Array of Dicts with \"symbol\" and \"coefficient\" for each reactant/product.\nmodified_equation: The formatted equation string.\ncomment: Any comment found on the line.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CementChemistry.sub_to_normal-Tuple{AbstractString}","page":"API","title":"CementChemistry.sub_to_normal","text":"Convert all numeric subscripts in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.super_to_normal-Tuple{AbstractString}","page":"API","title":"CementChemistry.super_to_normal","text":"Convert all numeric superscripts or ⁺/⁻ in s to normal line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CementChemistry.write_reaction-Tuple{Any, Any}","page":"API","title":"CementChemistry.write_reaction","text":"write_reaction(f, reaction)\n\nWrite a reaction Dict as JSON to a file (used for custom JSON output).\n\nArguments\n\nf: An open IO stream to write to.\nreaction: The reaction dictionary to write.\n\nReturns\n\nNothing. Writes directly to the file.\n\n\n\n\n\n","category":"method"},{"location":"#CementChemistry","page":"Home","title":"CementChemistry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CementChemistry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computational chemistry tool for low-carbon cementitious materials","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfbarthelemy/CementChemistry.jl","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install CementChemistry in your chosen environment by entering pkg mode by pressing ] and then:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add CementChemistry","category":"page"},{"location":"","page":"Home","title":"Home","text":"In order to use CementChemistry, it is then necessary to load the CementChemistry.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CementChemistry","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"This tutorial progressively introduces the main features of CementChemistry using practical examples.","category":"page"},{"location":"tutorial/","page":"-","title":"-","text":"","category":"page"},{"location":"man/equations/#Chemical-reactions","page":"Chemical reactions","title":"Chemical reactions","text":"","category":"section"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"In CementChermistry it is possible to build chemical reactions and manipulate them. A reaction is constructed as a structure, \"a composite data type that allows you to store multiple values in a single object\". The struct is organized as follows:","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"struct Reaction{SR<:AbstractSpecies, TR<:Number, SP<:AbstractSpecies, TP<:Number}\n    equation::String\n    colored::String\n    reactants::OrderedDict{SR, TR}\n    products::OrderedDict{SP, TP}\n    equal_sign::Char\nend","category":"page"},{"location":"man/equations/#Parsing-reactions","page":"Chemical reactions","title":"Parsing reactions","text":"","category":"section"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"Reaction is a structure which can be build from:","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a string containing species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"equation = \"13H⁺ + NO₃⁻ + CO₃²⁻ + 10e⁻ = 6H₂O@ + HCN@\"\nreac, prod, equal_sign = parse_equation(equation)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a string containing cement species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"eqC3S = \"C₃S + 5.3H = 1.3CH + C₁.₇SH₄\"\nrC3S = CemReaction(eqC3S)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"an operation on species","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using CementChemistry\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = C3S + 5.3H ↔ 1.3CH + CSH\ntypeof(r)","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a balance calculation","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using CementChemistry\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = Reaction([C3S, H, CH, CSH]; equal_sign='→')","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"a balance calculation with symbolic numbers","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using CementChemistry\nusing SymPy\nâ, b̂, ĝ = symbols(\"â b̂ ĝ\", real=true)\nCSH = CemSpecies(Dict(:C => â, :S => one(Sym), :H => ĝ))\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nr = Reaction([CSH, C3S, H, CH]; equal_sign='→')","category":"page"},{"location":"man/equations/","page":"Chemical reactions","title":"Chemical reactions","text":"using CementChemistry\nC3S = CemSpecies(\"C3S\")\nH = CemSpecies(\"H\")\nCH = CemSpecies(\"CH\")\nCSH = CemSpecies(\"C1.7SH4\")\nr = map(simplify, Reaction([C3S, H], [CH, CSH]; equal_sign='→'))\nA, _, _ = stoich_matrix([C3S], [CSH, H, CH]; involve_all_atoms=true) ;","category":"page"}]
}
